#include <iostream>
#include <cstdlib>
#include <ctime>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

using namespace std;

#define SIZE 20

int findMin(int arr[], int start, int end) {
    int min = arr[start];
    for (int i = start + 1; i < end; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

int main() {
    int arr[SIZE];
    int pipe_fd[2];  
    pid_t pid;

    srand(time(0));

    // Generate 20 random numbers between 1 and 100
    cout << "Generated Array: ";
    for (int i = 0; i < SIZE; i++) {
        arr[i] = rand() % 100 + 1;
        cout << arr[i] << " ";
    }
    cout << endl;

 
    if (pipe(pipe_fd) == -1) {
        cerr << "Pipe creation failed!" << endl;
        return 1;
    }


    pid = fork();

    if (pid < 0) {
        cerr << "Fork failed!" << endl;
        return 1;
    }

    if (pid == 0) {  // Child Process
        close(pipe_fd[0]);  
        int childMin = findMin(arr, SIZE / 2, SIZE);
        write(pipe_fd[1], &childMin, sizeof(childMin));
        close(pipe_fd[1]); 
        cout << "Child Process (PID: " << getpid() << ") found minimum: " << childMin << endl;
        exit(0);
    } else {  // Parent Process
        close(pipe_fd[1]); 
        int parentMin = findMin(arr, 0, SIZE / 2);
        int childMin;
        read(pipe_fd[0], &childMin, sizeof(childMin));
        close(pipe_fd[0]);  
        wait(NULL);  // Wait for child process to complete
        cout << "Parent Process (PID: " << getpid() << ") found minimum: " << parentMin << endl;
        cout << "Final Minimum of the Array: " << min(parentMin, childMin) << endl;
    }

    return 0;
}
